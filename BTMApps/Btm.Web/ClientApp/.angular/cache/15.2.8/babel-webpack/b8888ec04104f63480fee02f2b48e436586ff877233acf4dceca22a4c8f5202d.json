{"ast":null,"code":"/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {}\nif (false) {\n  /**\n   * @abstract\n   * @param {?} req\n   * @return {?}\n   */\n  HttpHandler.prototype.handle = function (req) {};\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {}\nif (false) {\n  /**\n   * @abstract\n   * @param {?} req\n   * @return {?}\n   */\n  HttpBackend.prototype.handle = function (req) {};\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() {}\nif (false) {\n  /** @type {?} */\n  Update.prototype.name;\n  /** @type {?|undefined} */\n  Update.prototype.value;\n  /** @type {?} */\n  Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n  /**\n   * Constructs a new HTTP header object with the given values.\n   * @param {?=} headers\n   */\n  constructor(headers) {\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n    this.lazyUpdate = null;\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit =\n      /**\n      * @return {?}\n      */\n      () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(\n        /**\n        * @param {?} line\n        * @return {?}\n        */\n        line => {\n          /** @type {?} */\n          const index = line.indexOf(':');\n          if (index > 0) {\n            /** @type {?} */\n            const name = line.slice(0, index);\n            /** @type {?} */\n            const key = name.toLowerCase();\n            /** @type {?} */\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              /** @type {?} */this.headers.get(key).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit =\n      /**\n      * @return {?}\n      */\n      () => {\n        this.headers = new Map();\n        Object.keys(headers).forEach(\n        /**\n        * @param {?} name\n        * @return {?}\n        */\n        name => {\n          /** @type {?} */\n          let values = headers[name];\n          /** @type {?} */\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param {?} name The header name to check for existence.\n   *\n   * @return {?} True if the header exists, false otherwise.\n   */\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param {?} name The header name.\n   *\n   * @return {?} The value string if the header exists, null otherwise\n   */\n  get(name) {\n    this.init();\n    /** @type {?} */\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @return {?} A list of header names.\n   */\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param {?} name The header name from which to retrieve values.\n   *\n   * @return {?} A string of values if the header exists, null otherwise.\n   */\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param {?} name The header name for which to append the value or values.\n   * @param {?} value The new value or array of values.\n   *\n   * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n   */\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param {?} name The header name.\n   * @param {?} value The value or values to set or overide for the given header.\n   *\n   * @return {?} A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param {?} name The header name.\n   * @param {?=} value The value or values to delete for the given header.\n   *\n   * @return {?} A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * @private\n   * @param {?} name\n   * @param {?} lcName\n   * @return {?}\n   */\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(\n        /**\n        * @param {?} update\n        * @return {?}\n        */\n        update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {?} other\n   * @return {?}\n   */\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      this.headers.set(key, /** @type {?} */other.headers.get(key));\n      this.normalizedNames.set(key, /** @type {?} */other.normalizedNames.get(key));\n    });\n  }\n  /**\n   * @private\n   * @param {?} update\n   * @return {?}\n   */\n  clone(update) {\n    /** @type {?} */\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n  /**\n   * @private\n   * @param {?} update\n   * @return {?}\n   */\n  applyUpdate(update) {\n    /** @type {?} */\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        /** @type {?} */\n        let value = /** @type {?} */update.value;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        /** @type {?} */\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        /** @type {?} */\n        const toDelete = /** @type {?} */update.value;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          /** @type {?} */\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(\n          /**\n          * @param {?} value\n          * @return {?}\n          */\n          value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n  /**\n   * \\@internal\n   * @param {?} fn\n   * @return {?}\n   */\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => fn( /** @type {?} */this.normalizedNames.get(key), /** @type {?} */this.headers.get(key)));\n  }\n}\nif (false) {\n  /**\n   * Internal map of lowercase header names to values.\n   * @type {?}\n   * @private\n   */\n  HttpHeaders.prototype.headers;\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   * @type {?}\n   * @private\n   */\n  HttpHeaders.prototype.normalizedNames;\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   * @type {?}\n   * @private\n   */\n  HttpHeaders.prototype.lazyInit;\n  /**\n   * Queued updates to be materialized the next initialization.\n   * @type {?}\n   * @private\n   */\n  HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() {}\nif (false) {\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  HttpParameterCodec.prototype.encodeKey = function (key) {};\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  HttpParameterCodec.prototype.encodeValue = function (value) {};\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  HttpParameterCodec.prototype.decodeKey = function (key) {};\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  HttpParameterCodec.prototype.decodeValue = function (value) {};\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param {?} key The key name.\n   * @return {?} The encoded key name.\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param {?} value The value.\n   * @return {?} The encoded value.\n   */\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param {?} key The encoded key name.\n   * @return {?} The decoded key name.\n   */\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param {?} value The encoded value.\n   * @return {?} The decoded value.\n   */\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n  /** @type {?} */\n  const map = new Map();\n  if (rawParams.length > 0) {\n    /** @type {?} */\n    const params = rawParams.split('&');\n    params.forEach(\n    /**\n    * @param {?} param\n    * @return {?}\n    */\n    param => {\n      /** @type {?} */\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      /** @type {?} */\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() {}\nif (false) {\n  /** @type {?} */\n  Update$1.prototype.param;\n  /** @type {?|undefined} */\n  Update$1.prototype.value;\n  /** @type {?} */\n  Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() {}\nif (false) {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   * @type {?|undefined}\n   */\n  HttpParamsOptions.prototype.fromString;\n  /**\n   * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n   * @type {?|undefined}\n   */\n  HttpParamsOptions.prototype.fromObject;\n  /**\n   * Encoding codec used to parse and serialize the parameters.\n   * @type {?|undefined}\n   */\n  HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n  /**\n   * @param {?=} options\n   */\n  constructor(options = /** @type {?} */{}) {\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      key => {\n        /** @type {?} */\n        const value = /** @type {?} */options.fromObject[key];\n        /** @type {?} */this.map.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param {?} param The parameter name.\n   * @return {?} True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param) {\n    this.init();\n    return (/** @type {?} */this.map.has(param)\n    );\n  }\n  /**\n   * Retrieves the first value for a parameter.\n   * @param {?} param The parameter name.\n   * @return {?} The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param) {\n    this.init();\n    /** @type {?} */\n    const res = /** @type {?} */this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\n   * Retrieves all values for a  parameter.\n   * @param {?} param The parameter name.\n   * @return {?} All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param) {\n    this.init();\n    return (/** @type {?} */this.map.get(param) || null\n    );\n  }\n  /**\n   * Retrieves all the parameters for this body.\n   * @return {?} The parameter names in a string array.\n   */\n  keys() {\n    this.init();\n    return Array.from( /** @type {?} */this.map.keys());\n  }\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param {?} param The parameter name.\n   * @param {?} value The new value to add.\n   * @return {?} A new body with the appended value.\n   */\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Replaces the value for a parameter.\n   * @param {?} param The parameter name.\n   * @param {?} value The new value.\n   * @return {?} A new body with the new value.\n   */\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param {?} param The parameter name.\n   * @param {?=} value The value to remove, if provided.\n   * @return {?} A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   * @return {?}\n   */\n  toString() {\n    this.init();\n    return this.keys().map(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      /** @type {?} */\n      const eKey = this.encoder.encodeKey(key);\n      return (/** @type {?} */ /** @type {?} */this.map.get(key).map(\n        /**\n        * @param {?} value\n        * @return {?}\n        */\n        value => eKey + '=' + this.encoder.encodeValue(value)).join('&')\n      );\n    }).join('&');\n  }\n  /**\n   * @private\n   * @param {?} update\n   * @return {?}\n   */\n  clone(update) {\n    /** @type {?} */\n    const clone = new HttpParams( /** @type {?} */{\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat([update]);\n    return clone;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(\n      /**\n      * @param {?} key\n      * @return {?}\n      */\n      key => /** @type {?} */this.map.set(key, /** @type {?} */ /** @type {?} */ /** @type {?} */this.cloneFrom.map.get(key)));\n      /** @type {?} */this.updates.forEach(\n      /**\n      * @param {?} update\n      * @return {?}\n      */\n      update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            /** @type {?} */\n            const base = (update.op === 'a' ? /** @type {?} */this.map.get(update.param) : undefined) || [];\n            base.push( /** @type {?} */update.value);\n            /** @type {?} */this.map.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              /** @type {?} */\n              let base = /** @type {?} */this.map.get(update.param) || [];\n              /** @type {?} */\n              const idx = base.indexOf(update.value);\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                /** @type {?} */this.map.set(update.param, base);\n              } else {\n                /** @type {?} */this.map.delete(update.param);\n              }\n            } else {\n              /** @type {?} */this.map.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpParams.prototype.map;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpParams.prototype.encoder;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpParams.prototype.updates;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() {}\nif (false) {\n  /** @type {?|undefined} */\n  HttpRequestInit.prototype.headers;\n  /** @type {?|undefined} */\n  HttpRequestInit.prototype.reportProgress;\n  /** @type {?|undefined} */\n  HttpRequestInit.prototype.params;\n  /** @type {?|undefined} */\n  HttpRequestInit.prototype.responseType;\n  /** @type {?|undefined} */\n  HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n  /**\n   * @param {?} method\n   * @param {?} url\n   * @param {?=} third\n   * @param {?=} fourth\n   */\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n    this.responseType = 'json';\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    /** @type {?} */\n    let options;\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? /** @type {?} */third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = /** @type {?} */third;\n    }\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      /** @type {?} */\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        /** @type {?} */\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        /** @type {?} */\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   * @return {?}\n   */\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (/** @type {?} */this.body.toString()\n    );\n  }\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   * @return {?}\n   */\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' || Array.isArray(this.body)) {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n  /**\n   * @param {?=} update\n   * @return {?}\n   */\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    /** @type {?} */\n    const method = update.method || this.method;\n    /** @type {?} */\n    const url = update.url || this.url;\n    /** @type {?} */\n    const responseType = update.responseType || this.responseType;\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    /** @type {?} */\n    const body = update.body !== undefined ? update.body : this.body;\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    /** @type {?} */\n    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n    /** @type {?} */\n    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress;\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    /** @type {?} */\n    let headers = update.headers || this.headers;\n    /** @type {?} */\n    let params = update.params || this.params;\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce(\n      /**\n      * @param {?} headers\n      * @param {?} name\n      * @return {?}\n      */\n      (headers, name) => headers.set(name, /** @type {?} */update.setHeaders[name]), headers);\n    }\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce(\n      /**\n      * @param {?} params\n      * @param {?} param\n      * @return {?}\n      */\n      (params, param) => params.set(param, /** @type {?} */update.setParams[param]), params);\n    }\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      reportProgress,\n      responseType,\n      withCredentials\n    });\n  }\n}\nif (false) {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   * @type {?}\n   */\n  HttpRequest.prototype.body;\n  /**\n   * Outgoing headers for this request.\n   * @type {?}\n   */\n  HttpRequest.prototype.headers;\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   * @type {?}\n   */\n  HttpRequest.prototype.reportProgress;\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   * @type {?}\n   */\n  HttpRequest.prototype.withCredentials;\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   * @type {?}\n   */\n  HttpRequest.prototype.responseType;\n  /**\n   * The outgoing HTTP request method.\n   * @type {?}\n   */\n  HttpRequest.prototype.method;\n  /**\n   * Outgoing URL parameters.\n   * @type {?}\n   */\n  HttpRequest.prototype.params;\n  /**\n   * The outgoing URL with all URL parameters set.\n   * @type {?}\n   */\n  HttpRequest.prototype.urlWithParams;\n  /** @type {?} */\n  HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent: 0,\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress: 1,\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader: 2,\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress: 3,\n  /**\n   * The full response including the body was received.\n   */\n  Response: 4,\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User: 5\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() {}\nif (false) {\n  /**\n   * Progress event type is either upload or download.\n   * @type {?}\n   */\n  HttpProgressEvent.prototype.type;\n  /**\n   * Number of bytes uploaded or downloaded.\n   * @type {?}\n   */\n  HttpProgressEvent.prototype.loaded;\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   * @type {?|undefined}\n   */\n  HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() {}\nif (false) {\n  /** @type {?} */\n  HttpDownloadProgressEvent.prototype.type;\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   * @type {?|undefined}\n   */\n  HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() {}\nif (false) {\n  /** @type {?} */\n  HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() {}\nif (false) {\n  /** @type {?} */\n  HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() {}\nif (false) {\n  /** @type {?} */\n  HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() {}\nif (false) {\n  /** @type {?} */\n  HttpJsonParseError.prototype.error;\n  /** @type {?} */\n  HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   * @param {?} init\n   * @param {?=} defaultStatus\n   * @param {?=} defaultStatusText\n   */\n  constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\nif (false) {\n  /**\n   * All response headers.\n   * @type {?}\n   */\n  HttpResponseBase.prototype.headers;\n  /**\n   * Response status code.\n   * @type {?}\n   */\n  HttpResponseBase.prototype.status;\n  /**\n   * Textual description of response status code.\n   *\n   * Do not depend on this.\n   * @type {?}\n   */\n  HttpResponseBase.prototype.statusText;\n  /**\n   * URL of the resource retrieved, or null if not available.\n   * @type {?}\n   */\n  HttpResponseBase.prototype.url;\n  /**\n   * Whether the status code falls in the 2xx range.\n   * @type {?}\n   */\n  HttpResponseBase.prototype.ok;\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   * @type {?}\n   */\n  HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   * @param {?=} init\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.ResponseHeader;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   * @param {?=} update\n   * @return {?}\n   */\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\nif (false) {\n  /** @type {?} */\n  HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n  /**\n   * Construct a new `HttpResponse`.\n   * @param {?=} init\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.Response;\n    this.body = init.body !== undefined ? init.body : null;\n  }\n  /**\n   * @param {?=} update\n   * @return {?}\n   */\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\nif (false) {\n  /**\n   * The response body, or `null` if one was not returned.\n   * @type {?}\n   */\n  HttpResponse.prototype.body;\n  /** @type {?} */\n  HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n  /**\n   * @param {?} init\n   */\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    this.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n    this.ok = false;\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\nif (false) {\n  /** @type {?} */\n  HttpErrorResponse.prototype.name;\n  /** @type {?} */\n  HttpErrorResponse.prototype.message;\n  /** @type {?} */\n  HttpErrorResponse.prototype.error;\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   * @type {?}\n   */\n  HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n  /**\n   * @param {?} handler\n   */\n  constructor(handler) {\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   * @param {?} first\n   * @param {?=} url\n   * @param {?=} options\n   * @return {?}\n   */\n  request(first, url, options = {}) {\n    /** @type {?} */\n    let req;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = /** @type {?} */first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n      // Figure out the headers.\n      /** @type {?} */\n      let headers = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n      // Sort out parameters.\n      /** @type {?} */\n      let params = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams( /** @type {?} */{\n            fromObject: options.params\n          });\n        }\n      }\n      // Construct the request.\n      req = new HttpRequest(first, /** @type {?} */url, options.body !== undefined ? options.body : null, {\n        headers,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials\n      });\n    }\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    /** @type {?} */\n    const events$ = of(req).pipe(concatMap(\n    /**\n    * @param {?} req\n    * @return {?}\n    */\n    req => this.handler.handle(req)));\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    /** @type {?} */\n    const res$ = /** @type {?} */events$.pipe(filter(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => event instanceof HttpResponse));\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map(\n            /**\n            * @param {?} res\n            * @return {?}\n            */\n            res => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map(\n            /**\n            * @param {?} res\n            * @return {?}\n            */\n            res => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map(\n            /**\n            * @param {?} res\n            * @return {?}\n            */\n            res => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map(\n            /**\n            * @param {?} res\n            * @return {?}\n            */\n            res => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param {?} url     The endpoint URL.\n   * @param {?=} options The HTTP options to send with the request.\n   *\n   * @return {?}\n   */\n  delete(url, options = {}) {\n    return this.request('DELETE', url, /** @type {?} */options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  get(url, options = {}) {\n    return this.request('GET', url, /** @type {?} */options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  head(url, options = {}) {\n    return this.request('HEAD', url, /** @type {?} */options);\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @template T\n   * @param {?} url The resource URL.\n   * @param {?} callbackParam The callback function name.\n   *\n   * @return {?}\n   */\n  jsonp(url, callbackParam) {\n    return this.request('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json'\n    });\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilites of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  options(url, options = {}) {\n    return this.request('OPTIONS', url, /** @type {?} */options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  patch(url, body, options = {}) {\n    return this.request('PATCH', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  post(url, body, options = {}) {\n    return this.request('POST', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  put(url, body, options = {}) {\n    return this.request('PUT', url, addBody(options, body));\n  }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler));\n};\nHttpClient.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.ɵfac\n});\n/** @nocollapse */\nHttpClient.ctorParameters = () => [{\n  type: HttpHandler\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() {}\nif (false) {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param {?} req The outgoing request object to handle.\n   * @param {?} next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @return {?} An observable of the event stream.\n   */\n  HttpInterceptor.prototype.intercept = function (req, next) {};\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n  /**\n   * @param {?} next\n   * @param {?} interceptor\n   */\n  constructor(next, interceptor) {\n    this.next = next;\n    this.interceptor = interceptor;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n  handle(req) {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpInterceptorHandler.prototype.next;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n  /**\n   * @param {?} req\n   * @param {?} next\n   * @return {?}\n   */\n  intercept(req, next) {\n    return next.handle(req);\n  }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {\n  return new (t || NoopInterceptor)();\n};\nNoopInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NoopInterceptor,\n  factory: NoopInterceptor.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n  /**\n   * @param {?} callbackMap\n   * @param {?} document\n   */\n  constructor(callbackMap, document) {\n    this.callbackMap = callbackMap;\n    this.document = document;\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   * @private\n   * @return {?}\n   */\n  nextCallback() {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param {?} req The request object.\n   * @return {?} An observable of the response events.\n   *\n   */\n  handle(req) {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n    // Everything else happens inside the Observable boundary.\n    return new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      /** @type {?} */\n      const callback = this.nextCallback();\n      /** @type {?} */\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n      // Construct the <script> tag and point it at the URL.\n      /** @type {?} */\n      const node = this.document.createElement('script');\n      node.src = url;\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n      // The response object, if one has been received, or null otherwise.\n      /** @type {?} */\n      let body = null;\n      // Whether the response callback has been called.\n      /** @type {?} */\n      let finished = false;\n      // Whether the request has been cancelled (and thus any other callbacks)\n      // should be ignored.\n      /** @type {?} */\n      let cancelled = false;\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] =\n      /**\n      * @param {?=} data\n      * @return {?}\n      */\n      data => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n        // Next, make sure the request wasn't cancelled in the meantime.\n        if (cancelled) {\n          return;\n        }\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      /** @type {?} */\n      const cleanup =\n      /**\n      * @return {?}\n      */\n      () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      /** @type {?} */\n      const onLoad =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        // Do nothing if the request has been cancelled.\n        if (cancelled) {\n          return;\n        }\n        // Cleanup the page.\n        cleanup();\n        // Check whether the response callback has run.\n        if (!finished) {\n          // It hasn't, something went wrong with the request. Return an error via\n          // the Observable error path. All JSONP errors have status 0.\n          observer.error(new HttpErrorResponse({\n            url,\n            status: 0,\n            statusText: 'JSONP Error',\n            error: new Error(JSONP_ERR_NO_CALLBACK)\n          }));\n          return;\n        }\n        // Success. body either contains the response body or null if none was\n        // returned.\n        observer.next(new HttpResponse({\n          body,\n          status: 200,\n          statusText: 'OK',\n          url\n        }));\n        // Complete the stream, the response is over.\n        observer.complete();\n      };\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      /** @type {?} */\n      const onError =\n      /**\n      * @param {?} error\n      * @return {?}\n      */\n      error => {\n        // If the request was already cancelled, no need to emit anything.\n        if (cancelled) {\n          return;\n        }\n        cleanup();\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url\n        }));\n      };\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n      // The request has now been successfully sent.\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      // Cancellation handler.\n      return (\n        /**\n        * @return {?}\n        */\n        () => {\n          // Track the cancellation so event listeners won't do anything even if already scheduled.\n          cancelled = true;\n          // Remove the event listeners so they won't run if the events later fire.\n          node.removeEventListener('load', onLoad);\n          node.removeEventListener('error', onError);\n          // And finally, clean up the page.\n          cleanup();\n        }\n      );\n    });\n  }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT));\n};\nJsonpClientBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.ɵfac\n});\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [{\n  type: JsonpCallbackContext\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  JsonpClientBackend.prototype.callbackMap;\n  /**\n   * @type {?}\n   * @private\n   */\n  JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n  /**\n   * @param {?} jsonp\n   */\n  constructor(jsonp) {\n    this.jsonp = jsonp;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param {?} req The outgoing request object to handle.\n   * @param {?} next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @return {?} An observable of the event stream.\n   */\n  intercept(req, next) {\n    if (req.method === 'JSONP') {\n      return this.jsonp.handle( /** @type {?} */req);\n    }\n    // Fall through for normal HTTP requests.\n    return next.handle(req);\n  }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend));\n};\nJsonpInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.ɵfac\n});\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [{\n  type: JsonpClientBackend\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpClientBackend\n    }];\n  }, null);\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {}\nif (false) {\n  /**\n   * @abstract\n   * @return {?}\n   */\n  XhrFactory.prototype.build = function () {};\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n  constructor() {}\n  /**\n   * @return {?}\n   */\n  build() {\n    return (/** @type {?} */new XMLHttpRequest()\n    );\n  }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\nBrowserXhr.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() {}\nif (false) {\n  /** @type {?} */\n  PartialResponse.prototype.headers;\n  /** @type {?} */\n  PartialResponse.prototype.status;\n  /** @type {?} */\n  PartialResponse.prototype.statusText;\n  /** @type {?} */\n  PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n  /**\n   * @param {?} xhrFactory\n   */\n  constructor(xhrFactory) {\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param {?} req The request object.\n   * @return {?} An observable of the response events.\n   */\n  handle(req) {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the JsonpClientModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n    }\n    // Everything happens on Observable subscription.\n    return new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      /** @type {?} */\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n      // Add all the requested headers.\n      req.headers.forEach(\n      /**\n      * @param {?} name\n      * @param {?} values\n      * @return {?}\n      */\n      (name, values) => xhr.setRequestHeader(name, values.join(',')));\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        /** @type {?} */\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        /** @type {?} */\n        const responseType = req.responseType.toLowerCase();\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = /** @type {?} */responseType !== 'json' ? responseType : 'text';\n      }\n      // Serialize the request body if one is present. If not, this will be set to null.\n      /** @type {?} */\n      const reqBody = req.serializeBody();\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      /** @type {?} */\n      let headerResponse = null;\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      /** @type {?} */\n      const partialFromXhr =\n      /**\n      * @return {?}\n      */\n      () => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n        // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n        /** @type {?} */\n        const status = xhr.status === 1223 ? 204 : xhr.status;\n        /** @type {?} */\n        const statusText = xhr.statusText || 'OK';\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        /** @type {?} */\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        /** @type {?} */\n        const url = getResponseUrl(xhr) || req.url;\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({\n          headers,\n          status,\n          statusText,\n          url\n        });\n        return headerResponse;\n      };\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n      // First up is the load event, which represents a response being fully available.\n      /** @type {?} */\n      const onLoad =\n      /**\n      * @return {?}\n      */\n      () => {\n        // Read response state from the memoized partial data.\n        let {\n          headers,\n          status,\n          statusText,\n          url\n        } = partialFromXhr();\n        // The body will be read out if present.\n        /** @type {?} */\n        let body = null;\n        if (status !== 204) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n        }\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? 200 : 0;\n        }\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        /** @type {?} */\n        let ok = status >= 200 && status < 300;\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          /** @type {?} */\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = /** @type {?} */{\n                error,\n                text: body\n              };\n            }\n          }\n        }\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          }));\n        }\n      };\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      /** @type {?} */\n      const onError =\n      /**\n      * @param {?} error\n      * @return {?}\n      */\n      error => {\n        const {\n          url\n        } = partialFromXhr();\n        /** @type {?} */\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined\n        });\n        observer.error(res);\n      };\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n      /** @type {?} */\n      let sentHeaders = false;\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      /** @type {?} */\n      const onDownProgress =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        /** @type {?} */\n        let progressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded\n        };\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      /** @type {?} */\n      const onUpProgress =\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      event => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        /** @type {?} */\n        let progress = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded\n        };\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n        // Send the event.\n        observer.next(progress);\n      };\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send( /** @type {?} */reqBody);\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return (\n        /**\n        * @return {?}\n        */\n        () => {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('load', onLoad);\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          }\n          // Finally, abort the in-flight request.\n          xhr.abort();\n        }\n      );\n    });\n  }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory));\n};\nHttpXhrBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.ɵfac\n});\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [{\n  type: XhrFactory\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: XhrFactory\n    }];\n  }, null);\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {}\nif (false) {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   * @abstract\n   * @return {?}\n   */\n  HttpXsrfTokenExtractor.prototype.getToken = function () {};\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n  /**\n   * @param {?} doc\n   * @param {?} platform\n   * @param {?} cookieName\n   */\n  constructor(doc, platform, cookieName) {\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * \\@internal for testing\n     */\n    this.parseCount = 0;\n  }\n  /**\n   * @return {?}\n   */\n  getToken() {\n    if (this.platform === 'server') {\n      return null;\n    }\n    /** @type {?} */\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME));\n};\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.ɵfac\n});\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [XSRF_COOKIE_NAME]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXsrfCookieExtractor.prototype.lastCookieString;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXsrfCookieExtractor.prototype.lastToken;\n  /**\n   * \\@internal for testing\n   * @type {?}\n   */\n  HttpXsrfCookieExtractor.prototype.parseCount;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXsrfCookieExtractor.prototype.doc;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXsrfCookieExtractor.prototype.platform;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n  /**\n   * @param {?} tokenService\n   * @param {?} headerName\n   */\n  constructor(tokenService, headerName) {\n    this.tokenService = tokenService;\n    this.headerName = headerName;\n  }\n  /**\n   * @param {?} req\n   * @param {?} next\n   * @return {?}\n   */\n  intercept(req, next) {\n    /** @type {?} */\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n      return next.handle(req);\n    }\n    /** @type {?} */\n    const token = this.tokenService.getToken();\n    // Be careful not to overwrite an existing header of the same name.\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({\n        headers: req.headers.set(this.headerName, token)\n      });\n    }\n    return next.handle(req);\n  }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME));\n};\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.ɵfac\n});\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [{\n  type: HttpXsrfTokenExtractor\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [XSRF_HEADER_NAME]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpXsrfTokenExtractor\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_HEADER_NAME]\n      }]\n    }];\n  }, null);\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXsrfInterceptor.prototype.tokenService;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n  /**\n   * @param {?} backend\n   * @param {?} injector\n   */\n  constructor(backend, injector) {\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n  handle(req) {\n    if (this.chain === null) {\n      /** @type {?} */\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n      /**\n      * @param {?} next\n      * @param {?} interceptor\n      * @return {?}\n      */\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {\n  return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpInterceptingHandler,\n  factory: HttpInterceptingHandler.ɵfac\n});\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [{\n  type: HttpBackend\n}, {\n  type: Injector\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpInterceptingHandler.prototype.chain;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpInterceptingHandler.prototype.backend;\n  /**\n   * @type {?}\n   * @private\n   */\n  HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n  /**\n  * @param {?} next\n  * @param {?} interceptor\n  * @return {?}\n  */\n  (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   * @return {?}\n   */\n  static disable() {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [{\n        provide: HttpXsrfInterceptor,\n        useClass: NoopInterceptor\n      }]\n    };\n  }\n  /**\n   * Configure XSRF protection.\n   * @param {?=} options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   * @return {?}\n   */\n  static withOptions(options = {}) {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [options.cookieName ? {\n        provide: XSRF_COOKIE_NAME,\n        useValue: options.cookieName\n      } : [], options.headerName ? {\n        provide: XSRF_HEADER_NAME,\n        useValue: options.headerName\n      } : []]\n    };\n  }\n}\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, {\n    provide: XSRF_COOKIE_NAME,\n    useValue: 'XSRF-TOKEN'\n  }, {\n    provide: XSRF_HEADER_NAME,\n    useValue: 'X-XSRF-TOKEN'\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, {\n        provide: XSRF_COOKIE_NAME,\n        useValue: 'XSRF-TOKEN'\n      }, {\n        provide: XSRF_HEADER_NAME,\n        useValue: 'X-XSRF-TOKEN'\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {}\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\nHttpClientModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [HttpClient, {\n    provide: HttpHandler,\n    useClass: HttpInterceptingHandler\n  }, HttpXhrBackend, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, BrowserXhr, {\n    provide: XhrFactory,\n    useExisting: BrowserXhr\n  }],\n  imports: [HttpClientXsrfModule.withOptions({\n    cookieName: 'XSRF-TOKEN',\n    headerName: 'X-XSRF-TOKEN'\n  })]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Optional configuration for XSRF protection.\n       */\n      imports: [HttpClientXsrfModule.withOptions({\n        cookieName: 'XSRF-TOKEN',\n        headerName: 'X-XSRF-TOKEN'\n      })],\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [HttpClient, {\n        provide: HttpHandler,\n        useClass: HttpInterceptingHandler\n      }, HttpXhrBackend, {\n        provide: HttpBackend,\n        useExisting: HttpXhrBackend\n      }, BrowserXhr, {\n        provide: XhrFactory,\n        useExisting: BrowserXhr\n      }]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, {\n    imports: [HttpClientXsrfModule]\n  });\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {}\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: JsonpInterceptor,\n    multi: true\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [JsonpClientBackend, {\n        provide: JsonpCallbackContext,\n        useFactory: jsonpCallbackContext\n      }, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: JsonpInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };","map":{"version":3,"names":["Injectable","InjectionToken","Inject","PLATFORM_ID","Injector","NgModule","of","Observable","concatMap","filter","map","DOCUMENT","ɵparseCookieValue","ɵngcc0","HttpHandler","prototype","handle","req","HttpBackend","Update","name","value","op","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","slice","key","toLowerCase","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","getAll","append","clone","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","HttpParameterCodec","encodeKey","encodeValue","decodeKey","decodeValue","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","params","param","eqIdx","val","list","v","encodeURIComponent","replace","Update$1","HttpParamsOptions","fromString","fromObject","encoder","HttpParams","options","updates","cloneFrom","Error","isArray","res","toString","eKey","join","idx","splice","HttpRequestInit","reportProgress","responseType","withCredentials","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","toUpperCase","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpProgressEvent","loaded","total","HttpDownloadProgressEvent","partialText","HttpUploadProgressEvent","HttpSentEvent","HttpUserEvent","HttpJsonParseError","error","text","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","HttpResponse","HttpErrorResponse","message","addBody","observe","HttpClient","handler","request","first","events$","pipe","res$","event","head","jsonp","callbackParam","patch","post","put","ɵfac","HttpClient_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","HttpInterceptor","intercept","next","HttpInterceptorHandler","interceptor","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","removeEventListener","JsonpClientBackend_Factory","decorators","args","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","build","BrowserXhr","XMLHttpRequest","BrowserXhr_Factory","PartialResponse","HttpXhrBackend","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","sentHeaders","onDownProgress","progressEvent","lengthComputable","onUpProgress","progress","upload","send","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","getToken","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","ngJitMode","ɵɵsetNgModuleScope","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_g","ɵangular_packages_common_http_http_h","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵHttpInterceptingHandler"],"sources":["C:/code/btm/BTM-Angular/BTMApps/Btm.Web/ClientApp/node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js"],"sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@publicApi\n * @abstract\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpHandler.prototype.handle = function (req) { };\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpBackend {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    HttpBackend.prototype.handle = function (req) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nfunction Update() { }\nif (false) {\n    /** @type {?} */\n    Update.prototype.name;\n    /** @type {?|undefined} */\n    Update.prototype.value;\n    /** @type {?} */\n    Update.prototype.op;\n}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * \\@publicApi\n */\nclass HttpHeaders {\n    /**\n     * Constructs a new HTTP header object with the given values.\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((/**\n                 * @param {?} line\n                 * @return {?}\n                 */\n                line => {\n                    /** @type {?} */\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        /** @type {?} */\n                        const name = line.slice(0, index);\n                        /** @type {?} */\n                        const key = name.toLowerCase();\n                        /** @type {?} */\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            (/** @type {?} */ (this.headers.get(key))).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                }));\n            });\n        }\n        else {\n            this.lazyInit = (/**\n             * @return {?}\n             */\n            () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach((/**\n                 * @param {?} name\n                 * @return {?}\n                 */\n                name => {\n                    /** @type {?} */\n                    let values = headers[name];\n                    /** @type {?} */\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                }));\n            });\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param {?} name The header name to check for existence.\n     *\n     * @return {?} True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param {?} name The header name.\n     *\n     * @return {?} The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        /** @type {?} */\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @return {?} A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param {?} name The header name from which to retrieve values.\n     *\n     * @return {?} A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param {?} name The header name for which to append the value or values.\n     * @param {?} value The new value or array of values.\n     *\n     * @return {?} A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param {?} name The header name.\n     * @param {?} value The value or values to set or overide for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param {?} name The header name.\n     * @param {?=} value The value or values to delete for the given header.\n     *\n     * @return {?} A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((/**\n                 * @param {?} update\n                 * @return {?}\n                 */\n                update => this.applyUpdate(update)));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} other\n     * @return {?}\n     */\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));\n            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));\n        }));\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    applyUpdate(update) {\n        /** @type {?} */\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                /** @type {?} */\n                let value = (/** @type {?} */ (update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                /** @type {?} */\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                /** @type {?} */\n                const toDelete = (/** @type {?} */ (update.value));\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    /** @type {?} */\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((/**\n                     * @param {?} value\n                     * @return {?}\n                     */\n                    value => toDelete.indexOf(value) === -1));\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));\n    }\n}\nif (false) {\n    /**\n     * Internal map of lowercase header names to values.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.headers;\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.normalizedNames;\n    /**\n     * Complete the lazy initialization of this object (needed before reading).\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyInit;\n    /**\n     * Queued updates to be materialized the next initialization.\n     * @type {?}\n     * @private\n     */\n    HttpHeaders.prototype.lazyUpdate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@publicApi\n *\n * @record\n */\nfunction HttpParameterCodec() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.encodeValue = function (value) { };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeKey = function (key) { };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParameterCodec.prototype.decodeValue = function (value) { };\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * \\@publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param {?} key The key name.\n     * @return {?} The encoded key name.\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param {?} value The value.\n     * @return {?} The encoded value.\n     */\n    encodeValue(value) { return standardEncoding(value); }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param {?} key The encoded key name.\n     * @return {?} The decoded key name.\n     */\n    decodeKey(key) { return decodeURIComponent(key); }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param {?} value The encoded value.\n     * @return {?} The decoded value.\n     */\n    decodeValue(value) { return decodeURIComponent(value); }\n}\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((/**\n         * @param {?} param\n         * @return {?}\n         */\n        (param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        }));\n    }\n    return map;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * @record\n */\nfunction Update$1() { }\nif (false) {\n    /** @type {?} */\n    Update$1.prototype.param;\n    /** @type {?|undefined} */\n    Update$1.prototype.value;\n    /** @type {?} */\n    Update$1.prototype.op;\n}\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpParamsOptions() { }\nif (false) {\n    /**\n     * String representation of the HTTP parameters in URL-query-string format.\n     * Mutually exclusive with `fromObject`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromString;\n    /**\n     * Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.fromObject;\n    /**\n     * Encoding codec used to parse and serialize the parameters.\n     * @type {?|undefined}\n     */\n    HttpParamsOptions.prototype.encoder;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * \\@publicApi\n */\nclass HttpParams {\n    /**\n     * @param {?=} options\n     */\n    constructor(options = (/** @type {?} */ ({}))) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => {\n                /** @type {?} */\n                const value = ((/** @type {?} */ (options.fromObject)))[key];\n                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);\n            }));\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param {?} param The parameter name.\n     * @return {?} True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param {?} param The parameter name.\n     * @return {?} The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        /** @type {?} */\n        const res = (/** @type {?} */ (this.map)).get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param {?} param The parameter name.\n     * @return {?} All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return (/** @type {?} */ (this.map)).get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @return {?} The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from((/** @type {?} */ (this.map)).keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value to add.\n     * @return {?} A new body with the appended value.\n     */\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\n    /**\n     * Replaces the value for a parameter.\n     * @param {?} param The parameter name.\n     * @param {?} value The new value.\n     * @return {?} A new body with the new value.\n     */\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param {?} param The parameter name.\n     * @param {?=} value The value to remove, if provided.\n     * @return {?} A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map((/**\n         * @param {?} key\n         * @return {?}\n         */\n        key => {\n            /** @type {?} */\n            const eKey = this.encoder.encodeKey(key);\n            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => eKey + '=' + this.encoder.encodeValue(value)))\n                .join('&');\n        }))\n            .join('&');\n    }\n    /**\n     * @private\n     * @param {?} update\n     * @return {?}\n     */\n    clone(update) {\n        /** @type {?} */\n        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((/**\n             * @param {?} key\n             * @return {?}\n             */\n            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));\n            (/** @type {?} */ (this.updates)).forEach((/**\n             * @param {?} update\n             * @return {?}\n             */\n            update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        /** @type {?} */\n                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];\n                        base.push((/** @type {?} */ (update.value)));\n                        (/** @type {?} */ (this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            /** @type {?} */\n                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];\n                            /** @type {?} */\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                (/** @type {?} */ (this.map)).set(update.param, base);\n                            }\n                            else {\n                                (/** @type {?} */ (this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            (/** @type {?} */ (this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            }));\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.map;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.encoder;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.updates;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpParams.prototype.cloneFrom;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n * @record\n */\nfunction HttpRequestInit() { }\nif (false) {\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.headers;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.reportProgress;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.params;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.responseType;\n    /** @type {?|undefined} */\n    HttpRequestInit.prototype.withCredentials;\n}\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpRequest {\n    /**\n     * @param {?} method\n     * @param {?} url\n     * @param {?=} third\n     * @param {?=} fourth\n     */\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        /** @type {?} */\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = (/** @type {?} */ (third));\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            /** @type {?} */\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                /** @type {?} */\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                /** @type {?} */\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return ((/** @type {?} */ (this.body))).toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        /** @type {?} */\n        const method = update.method || this.method;\n        /** @type {?} */\n        const url = update.url || this.url;\n        /** @type {?} */\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        /** @type {?} */\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        /** @type {?} */\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        /** @type {?} */\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        /** @type {?} */\n        let headers = update.headers || this.headers;\n        /** @type {?} */\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((/**\n                 * @param {?} headers\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((/**\n             * @param {?} params\n             * @param {?} param\n             * @return {?}\n             */\n            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params, headers, reportProgress, responseType, withCredentials,\n        });\n    }\n}\nif (false) {\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     * @type {?}\n     */\n    HttpRequest.prototype.body;\n    /**\n     * Outgoing headers for this request.\n     * @type {?}\n     */\n    HttpRequest.prototype.headers;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     * @type {?}\n     */\n    HttpRequest.prototype.reportProgress;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     * @type {?}\n     */\n    HttpRequest.prototype.withCredentials;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     * @type {?}\n     */\n    HttpRequest.prototype.responseType;\n    /**\n     * The outgoing HTTP request method.\n     * @type {?}\n     */\n    HttpRequest.prototype.method;\n    /**\n     * Outgoing URL parameters.\n     * @type {?}\n     */\n    HttpRequest.prototype.params;\n    /**\n     * The outgoing URL with all URL parameters set.\n     * @type {?}\n     */\n    HttpRequest.prototype.urlWithParams;\n    /** @type {?} */\n    HttpRequest.prototype.url;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst HttpEventType = {\n    /**\n     * The request was sent out over the wire.\n     */\n    Sent: 0,\n    /**\n     * An upload progress event was received.\n     */\n    UploadProgress: 1,\n    /**\n     * The response status code and headers were received.\n     */\n    ResponseHeader: 2,\n    /**\n     * A download progress event was received.\n     */\n    DownloadProgress: 3,\n    /**\n     * The full response including the body was received.\n     */\n    Response: 4,\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = 'Sent';\nHttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';\nHttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';\nHttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';\nHttpEventType[HttpEventType.Response] = 'Response';\nHttpEventType[HttpEventType.User] = 'User';\n/**\n * Base interface for progress events.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpProgressEvent() { }\nif (false) {\n    /**\n     * Progress event type is either upload or download.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.type;\n    /**\n     * Number of bytes uploaded or downloaded.\n     * @type {?}\n     */\n    HttpProgressEvent.prototype.loaded;\n    /**\n     * Total number of bytes to upload or download. Depending on the request or\n     * response, this may not be computable and thus may not be present.\n     * @type {?|undefined}\n     */\n    HttpProgressEvent.prototype.total;\n}\n/**\n * A download progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpDownloadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpDownloadProgressEvent.prototype.type;\n    /**\n     * The partial response body as downloaded so far.\n     *\n     * Only present if the responseType was `text`.\n     * @type {?|undefined}\n     */\n    HttpDownloadProgressEvent.prototype.partialText;\n}\n/**\n * An upload progress event.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpUploadProgressEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUploadProgressEvent.prototype.type;\n}\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@publicApi\n * @record\n */\nfunction HttpSentEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpSentEvent.prototype.type;\n}\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nfunction HttpUserEvent() { }\nif (false) {\n    /** @type {?} */\n    HttpUserEvent.prototype.type;\n}\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n * @record\n */\nfunction HttpJsonParseError() { }\nif (false) {\n    /** @type {?} */\n    HttpJsonParseError.prototype.error;\n    /** @type {?} */\n    HttpJsonParseError.prototype.text;\n}\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     * @param {?} init\n     * @param {?=} defaultStatus\n     * @param {?=} defaultStatusText\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\nif (false) {\n    /**\n     * All response headers.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.headers;\n    /**\n     * Response status code.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.status;\n    /**\n     * Textual description of response status code.\n     *\n     * Do not depend on this.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.statusText;\n    /**\n     * URL of the resource retrieved, or null if not available.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.url;\n    /**\n     * Whether the status code falls in the 2xx range.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.ok;\n    /**\n     * Type of the response, narrowed to either the full response or the header.\n     * @type {?}\n     */\n    HttpResponseBase.prototype.type;\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpHeaderResponse.prototype.type;\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@publicApi\n * @template T\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     * @param {?=} init\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\nif (false) {\n    /**\n     * The response body, or `null` if one was not returned.\n     * @type {?}\n     */\n    HttpResponse.prototype.body;\n    /** @type {?} */\n    HttpResponse.prototype.type;\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    /**\n     * @param {?} init\n     */\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message =\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\nif (false) {\n    /** @type {?} */\n    HttpErrorResponse.prototype.name;\n    /** @type {?} */\n    HttpErrorResponse.prototype.message;\n    /** @type {?} */\n    HttpErrorResponse.prototype.error;\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     * @type {?}\n     */\n    HttpErrorResponse.prototype.ok;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n * \\@usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * \\@publicApi\n */\nclass HttpClient {\n    /**\n     * @param {?} handler\n     */\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(first, url, options = {}) {\n        /** @type {?} */\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = (/** @type {?} */ (first));\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            /** @type {?} */\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            /** @type {?} */\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        /** @type {?} */\n        const events$ = of(req).pipe(concatMap((/**\n         * @param {?} req\n         * @return {?}\n         */\n        (req) => this.handler.handle(req))));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        /** @type {?} */\n        const res$ = (/** @type {?} */ (events$.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event instanceof HttpResponse)))));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        })));\n                    case 'blob':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        })));\n                    case 'text':\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        })));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((/**\n                         * @param {?} res\n                         * @return {?}\n                         */\n                        (res) => res.body)));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param {?} url     The endpoint URL.\n     * @param {?=} options The HTTP options to send with the request.\n     *\n     * @return {?}\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @template T\n     * @param {?} url The resource URL.\n     * @param {?} callbackParam The callback function name.\n     *\n     * @return {?}\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, (/** @type {?} */ (options)));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\n/** @nocollapse */\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpClient.prototype.handler;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * \\@publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * \\@usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n * @record\n */\nfunction HttpInterceptor() { }\nif (false) {\n    /**\n     * Identifies and handles a given HTTP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    HttpInterceptor.prototype.intercept = function (req, next) { };\n}\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    /**\n     * @param {?} next\n     * @param {?} interceptor\n     */\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.next;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptorHandler.prototype.interceptor;\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * \\@publicApi\n * @type {?}\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n/** @type {?} */\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n * @abstract\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * \\@publicApi\n */\nclass JsonpClientBackend {\n    /**\n     * @param {?} callbackMap\n     * @param {?} document\n     */\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @private\n     * @return {?}\n     */\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            /** @type {?} */\n            const callback = this.nextCallback();\n            /** @type {?} */\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            /** @type {?} */\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            /** @type {?} */\n            let body = null;\n            // Whether the response callback has been called.\n            /** @type {?} */\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            /** @type {?} */\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (/**\n             * @param {?=} data\n             * @return {?}\n             */\n            (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            });\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            /** @type {?} */\n            const cleanup = (/**\n             * @return {?}\n             */\n            () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            });\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            /** @type {?} */\n            const onLoad = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body,\n                    status: 200,\n                    statusText: 'OK', url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            });\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error', url,\n                }));\n            });\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            });\n        }));\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\n/** @nocollapse */\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.callbackMap;\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpClientBackend.prototype.document;\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * \\@publicApi\n */\nclass JsonpInterceptor {\n    /**\n     * @param {?} jsonp\n     */\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param {?} req The outgoing request object to handle.\n     * @param {?} next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @return {?} An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle((/** @type {?} */ (req)));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\n/** @nocollapse */\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    JsonpInterceptor.prototype.jsonp;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@publicApi\n * @abstract\n */\nclass XhrFactory {\n}\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    XhrFactory.prototype.build = function () { };\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Tracks a response from the server that does not yet have a body.\n * @record\n */\nfunction PartialResponse() { }\nif (false) {\n    /** @type {?} */\n    PartialResponse.prototype.headers;\n    /** @type {?} */\n    PartialResponse.prototype.status;\n    /** @type {?} */\n    PartialResponse.prototype.statusText;\n    /** @type {?} */\n    PartialResponse.prototype.url;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * \\@publicApi\n */\nclass HttpXhrBackend {\n    /**\n     * @param {?} xhrFactory\n     */\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param {?} req The request object.\n     * @return {?} An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            /** @type {?} */\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((/**\n             * @param {?} name\n             * @param {?} values\n             * @return {?}\n             */\n            (name, values) => xhr.setRequestHeader(name, values.join(','))));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                /** @type {?} */\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                /** @type {?} */\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            /** @type {?} */\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            /** @type {?} */\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            /** @type {?} */\n            const partialFromXhr = (/**\n             * @return {?}\n             */\n            () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                /** @type {?} */\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                /** @type {?} */\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                /** @type {?} */\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                /** @type {?} */\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            });\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            /** @type {?} */\n            const onLoad = (/**\n             * @return {?}\n             */\n            () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                /** @type {?} */\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                /** @type {?} */\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    /** @type {?} */\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = (/** @type {?} */ ({ error, text: body }));\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            });\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            /** @type {?} */\n            const onError = (/**\n             * @param {?} error\n             * @return {?}\n             */\n            (error) => {\n                const { url } = partialFromXhr();\n                /** @type {?} */\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            });\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            /** @type {?} */\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onDownProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                /** @type {?} */\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            });\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            /** @type {?} */\n            const onUpProgress = (/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                /** @type {?} */\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            });\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send((/** @type {?} */ (reqBody)));\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return (/**\n             * @return {?}\n             */\n            () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            });\n        }));\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\n/** @nocollapse */\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXhrBackend.prototype.xhrFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\n/** @type {?} */\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@publicApi\n * @abstract\n */\nclass HttpXsrfTokenExtractor {\n}\nif (false) {\n    /**\n     * Get the XSRF token to use with an outgoing request.\n     *\n     * Will be called for every request, so the token may change between requests.\n     * @abstract\n     * @return {?}\n     */\n    HttpXsrfTokenExtractor.prototype.getToken = function () { };\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    /**\n     * @param {?} doc\n     * @param {?} platform\n     * @param {?} cookieName\n     */\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        /** @type {?} */\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\n/** @nocollapse */\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastCookieString;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.lastToken;\n    /**\n     * \\@internal for testing\n     * @type {?}\n     */\n    HttpXsrfCookieExtractor.prototype.parseCount;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.doc;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfCookieExtractor.prototype.cookieName;\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    /**\n     * @param {?} tokenService\n     * @param {?} headerName\n     */\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    intercept(req, next) {\n        /** @type {?} */\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        /** @type {?} */\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\n/** @nocollapse */\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.tokenService;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpXsrfInterceptor.prototype.headerName;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    /**\n     * @param {?} backend\n     * @param {?} injector\n     */\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    handle(req) {\n        if (this.chain === null) {\n            /** @type {?} */\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((/**\n             * @param {?} next\n             * @param {?} interceptor\n             * @return {?}\n             */\n            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\n/** @nocollapse */\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.chain;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.backend;\n    /**\n     * @type {?}\n     * @private\n     */\n    HttpInterceptingHandler.prototype.injector;\n}\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((/**\n     * @param {?} next\n     * @param {?} interceptor\n     * @return {?}\n     */\n    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * \\@publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param {?=} options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     * @return {?}\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [HttpClientXsrfModule.withOptions({\n            cookieName: 'XSRF-TOKEN',\n            headerName: 'X-XSRF-TOKEN'\n        })] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * \\@publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor };\n\n"],"mappings":"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ACK,QAAQ,CAAC,GAAG,UAAU;AAClDL,aAAa,CAACA,aAAa,CAACM,IAAI,CAAC,GAAG,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiB,GAAG,CAAE;AAC/B,IAAI,KAAK,EAAE;EACP;AACJ;AACA;AACA;EACIA,iBAAiB,CAAC3H,SAAS,CAACgH,IAAI;EAChC;AACJ;AACA;AACA;EACIW,iBAAiB,CAAC3H,SAAS,CAAC4H,MAAM;EAClC;AACJ;AACA;AACA;AACA;EACID,iBAAiB,CAAC3H,SAAS,CAAC6H,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,yBAAyB,GAAG,CAAE;AACvC,IAAI,KAAK,EAAE;EACP;EACAA,yBAAyB,CAAC9H,SAAS,CAACgH,IAAI;EACxC;AACJ;AACA;AACA;AACA;AACA;EACIc,yBAAyB,CAAC9H,SAAS,CAAC+H,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuB,GAAG,CAAE;AACrC,IAAI,KAAK,EAAE;EACP;EACAA,uBAAuB,CAAChI,SAAS,CAACgH,IAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,aAAa,GAAG,CAAE;AAC3B,IAAI,KAAK,EAAE;EACP;EACAA,aAAa,CAACjI,SAAS,CAACgH,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,aAAa,GAAG,CAAE;AAC3B,IAAI,KAAK,EAAE;EACP;EACAA,aAAa,CAAClI,SAAS,CAACgH,IAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmB,kBAAkB,GAAG,CAAE;AAChC,IAAI,KAAK,EAAE;EACP;EACAA,kBAAkB,CAACnI,SAAS,CAACoI,KAAK;EAClC;EACAD,kBAAkB,CAACnI,SAAS,CAACqI,IAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACnB;AACJ;AACA;AACA;AAC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,OAAO,CAACd,MAAM;IACtB0B,cAAc,EAAEZ,OAAO,CAACY,cAAc;IACtCC,YAAY,EAAEb,OAAO,CAACa,YAAY;IAClCC,eAAe,EAAEd,OAAO,CAACc;EAC7B,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwD,UAAU,CAAC;EACb;AACJ;AACA;EACIzI,WAAW,CAAC0I,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAO,CAACC,KAAK,EAAEjD,GAAG,EAAExB,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9B;IACA,IAAI1E,GAAG;IACP;IACA,IAAImJ,KAAK,YAAYlD,WAAW,EAAE;MAC9B;MACA;MACAjG,GAAG,GAAI,gBAAkBmJ,KAAO;IACpC,CAAC,MACI;MACD;MACA;MACA;MACA;MACA;MACA,IAAI3I,OAAO,GAAGqC,SAAS;MACvB,IAAI6B,OAAO,CAAClE,OAAO,YAAYF,WAAW,EAAE;QACxCE,OAAO,GAAGkE,OAAO,CAAClE,OAAO;MAC7B,CAAC,MACI;QACDA,OAAO,GAAG,IAAIF,WAAW,CAACoE,OAAO,CAAClE,OAAO,CAAC;MAC9C;MACA;MACA;MACA,IAAIoD,MAAM,GAAGf,SAAS;MACtB,IAAI,CAAC,CAAC6B,OAAO,CAACd,MAAM,EAAE;QAClB,IAAIc,OAAO,CAACd,MAAM,YAAYa,UAAU,EAAE;UACtCb,MAAM,GAAGc,OAAO,CAACd,MAAM;QAC3B,CAAC,MACI;UACDA,MAAM,GA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}